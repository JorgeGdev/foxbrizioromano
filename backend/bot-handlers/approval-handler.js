// ===============================
// TIGRIZIO - APPROVAL HANDLER
// Manejo de validaci√≥n de scripts con botones
// ===============================

const BotMessages = require("../utils/bot-messages");

class ApprovalHandler {
  constructor(bot) {
    this.bot = bot;
    console.log('‚úÖ Approval Handler iniciado');
  }

  // ===============================
  // CONFIGURAR MANEJO DE BOTONES
  // ===============================
  setupApprovalHandler() {
    this.bot.bot.on("callback_query", async (callbackQuery) => {
      await this.handleCallback(callbackQuery);
    });

    console.log('üîò Callback handlers configurados');
  }

  // ===============================
  // MOSTRAR SCRIPT PARA APROBACI√ìN
  // ===============================
  async showScriptForApproval(chatId, scriptResult, imageNumber, keyword, sessionId) {
    try {
      // Crear datos de sesi√≥n
      const sessionData = {
        scriptResult,
        imageNumber,
        keyword,
        chatId
      };

      // Guardar sesi√≥n
      const sessionCreated = this.bot.sessionManager.createSession(sessionId, sessionData);
      
      if (!sessionCreated) {
        throw new Error('No se pudo crear la sesi√≥n de aprobaci√≥n');
      }

      // Crear mensaje de aprobaci√≥n
      const message = BotMessages.getScriptApprovalMessage(scriptResult, imageNumber, keyword);
      const keyboard = BotMessages.getApprovalKeyboard(sessionId);

      await this.bot.sendMessage(chatId, message, { reply_markup: keyboard });

      console.log(`üìã Script enviado para aprobaci√≥n: ${sessionId}`);
      return true;

    } catch (error) {
      console.error('‚ùå Error mostrando script para aprobaci√≥n:', error);
      await this.bot.sendMessage(chatId, BotMessages.getErrorMessage(error.message));
      return false;
    }
  }

  // ===============================
  // MANEJAR CALLBACK PRINCIPAL
  // ===============================
  async handleCallback(callbackQuery) {
    const chatId = callbackQuery.message.chat.id;
    const data = callbackQuery.data;

    try {
      // Verificar autorizaci√≥n
      if (chatId.toString() !== this.bot.chatId) {
        await this.bot.answerCallback(callbackQuery.id, BotMessages.getAuthMessages().unauthorized, true);
        return;
      }

      // Extraer acci√≥n y sessionId
      const [action, sessionId] = data.split('_');
      
      if (!sessionId) {
        await this.bot.answerCallback(callbackQuery.id, BotMessages.getAuthMessages().unknownAction);
        return;
      }

      // Verificar que la sesi√≥n existe
      const sessionData = this.bot.sessionManager.getSession(sessionId);
      if (!sessionData) {
        await this.bot.answerCallback(callbackQuery.id, BotMessages.getAuthMessages().sessionExpired, true);
        return;
      }

      // Procesar acci√≥n
      await this.processAction(action, sessionId, sessionData, callbackQuery);

    } catch (error) {
      console.error('‚ùå Error manejando callback:', error);
      await this.bot.answerCallback(callbackQuery.id, BotMessages.getAuthMessages().processingError, true);
    }
  }

  // ===============================
  // PROCESAR ACCI√ìN ESPEC√çFICA
  // ===============================
  async processAction(action, sessionId, sessionData, callbackQuery) {
    const chatId = callbackQuery.message.chat.id;
    const messageId = callbackQuery.message.message_id;

    switch (action) {
      case 'approve':
        await this.handleApprove(sessionId, sessionData, callbackQuery, chatId, messageId);
        break;
      
      case 'reject':
        await this.handleReject(sessionId, sessionData, callbackQuery, chatId, messageId);
        break;
      
      case 'regenerate':
        await this.handleRegenerate(sessionId, sessionData, callbackQuery, chatId, messageId);
        break;
      
      case 'cancel':
        await this.handleCancel(sessionId, callbackQuery, chatId, messageId);
        break;
      
      default:
        await this.bot.answerCallback(callbackQuery.id, BotMessages.getAuthMessages().unknownAction);
    }
  }

  // ===============================
  // MANEJAR APROBACI√ìN
  // ===============================
  async handleApprove(sessionId, sessionData, callbackQuery, chatId, messageId) {
    try {
      // Confirmar aprobaci√≥n
      await this.bot.answerCallback(callbackQuery.id, BotMessages.getCallbackResponses().approved);

      // Editar mensaje original
      await this.bot.editMessage(chatId, messageId, BotMessages.getApprovalMessages().approved);

      // Log de aprobaci√≥n
      console.log(`‚úÖ Script aprobado para sesi√≥n: ${sessionId}`);

      // Continuar con generaci√≥n de video
      await this.bot.videoPipeline.continueAfterApproval(sessionData, sessionId);

    } catch (error) {
      console.error('‚ùå Error en aprobaci√≥n:', error);
      await this.bot.sendMessage(chatId, BotMessages.getErrorMessage(error.message, sessionId));
    } finally {
      // Limpiar sesi√≥n
      this.bot.sessionManager.deleteSession(sessionId);
    }
  }

  // ===============================
  // MANEJAR RECHAZO
  // ===============================
  async handleReject(sessionId, sessionData, callbackQuery, chatId, messageId) {
    try {
      // Confirmar rechazo
      await this.bot.answerCallback(callbackQuery.id, BotMessages.getCallbackResponses().rejected);

      // Editar mensaje original
      await this.bot.editMessage(chatId, messageId, BotMessages.getApprovalMessages().rejected);

      // Log de rechazo
      console.log(`‚ùå Script rechazado para sesi√≥n: ${sessionId}`);

      // Regenerar script autom√°ticamente
      await this.regenerateScript(sessionData, chatId);

    } catch (error) {
      console.error('‚ùå Error en rechazo:', error);
      await this.bot.sendMessage(chatId, BotMessages.getErrorMessage(error.message, sessionId));
    } finally {
      // Limpiar sesi√≥n
      this.bot.sessionManager.deleteSession(sessionId);
    }
  }

  // ===============================
  // MANEJAR REGENERACI√ìN
  // ===============================
  async handleRegenerate(sessionId, sessionData, callbackQuery, chatId, messageId) {
    try {
      // Confirmar regeneraci√≥n
      await this.bot.answerCallback(callbackQuery.id, BotMessages.getCallbackResponses().regenerating);

      // Editar mensaje original
      await this.bot.editMessage(chatId, messageId, BotMessages.getApprovalMessages().regenerating);

      // Log de regeneraci√≥n
      console.log(`üîÑ Regenerando script para sesi√≥n: ${sessionId}`);

      // Regenerar script
      await this.regenerateScript(sessionData, chatId);

    } catch (error) {
      console.error('‚ùå Error en regeneraci√≥n:', error);
      await this.bot.sendMessage(chatId, BotMessages.getErrorMessage(error.message, sessionId));
    } finally {
      // Limpiar sesi√≥n
      this.bot.sessionManager.deleteSession(sessionId);
    }
  }

  // ===============================
  // MANEJAR CANCELACI√ìN
  // ===============================
  async handleCancel(sessionId, callbackQuery, chatId, messageId) {
    try {
      // Confirmar cancelaci√≥n
      await this.bot.answerCallback(callbackQuery.id, BotMessages.getCallbackResponses().cancelled);

      // Editar mensaje original
      await this.bot.editMessage(chatId, messageId, BotMessages.getApprovalMessages().cancelled);

      // Log de cancelaci√≥n
      console.log(`üö´ Generaci√≥n cancelada para sesi√≥n: ${sessionId}`);

    } catch (error) {
      console.error('‚ùå Error en cancelaci√≥n:', error);
      await this.bot.sendMessage(chatId, BotMessages.getErrorMessage(error.message, sessionId));
    } finally {
      // Limpiar sesi√≥n
      this.bot.sessionManager.deleteSession(sessionId);
    }
  }

  // ===============================
  // REGENERAR SCRIPT
  // ===============================
  async regenerateScript(sessionData, chatId) {
    try {
      const { keyword, imageNumber } = sessionData;

      // Generar nuevo script
      await this.bot.sendMessage(chatId, `üé≠ Regenerando script para "${keyword}"...`);
      
      const newScriptResult = await this.bot.scriptGen.generateScript(keyword);
      
      if (newScriptResult.success) {
        // Mostrar nuevo script para aprobaci√≥n
        const newSessionId = this.bot.sessionManager.generateSessionId();
        await this.showScriptForApproval(chatId, newScriptResult, imageNumber, keyword, newSessionId);
        
        await this.bot.sendMessage(chatId, 
          `‚úÖ **Nuevo script generado**\n\n` +
          `üìä ${newScriptResult.wordCount} palabras\n` +
          `üîÑ Revisa el script arriba y decide`
        );
      } else {
        await this.bot.sendMessage(chatId, 
          `‚ùå **Error regenerando script**\n\n` +
          `${newScriptResult.error}\n\n` +
          `üí° Intenta con un t√©rmino diferente`
        );
      }

    } catch (error) {
      console.error('‚ùå Error regenerando script:', error);
      await this.bot.sendMessage(chatId, BotMessages.getErrorMessage(error.message));
    }
  }

  // ===============================
  // VALIDAR SCRIPT QUALITY
  // ===============================
  validateScriptQuality(scriptResult) {
    const issues = [];

    // Verificar longitud
    if (scriptResult.wordCount < 70) {
      issues.push('Script muy corto (menos de 70 palabras)');
    }
    
    if (scriptResult.wordCount > 85) {
      issues.push('Script muy largo (m√°s de 85 palabras)');
    }

    // Verificar contenido
    const script = scriptResult.script.toLowerCase();
    
    if (!script.includes('here we go') && !script.includes('oficial') && !script.includes('confirmado')) {
      issues.push('Script no contiene palabras de confirmaci√≥n t√≠picas');
    }

    // Verificar estructura emotiva
    if (!script.includes('!') && !script.includes('incre√≠ble') && !script.includes('bombazo')) {
      issues.push('Script carece de elementos emotivos');
    }

    return {
      isValid: issues.length === 0,
      issues: issues,
      quality: issues.length === 0 ? 'excellent' : issues.length <= 2 ? 'good' : 'poor'
    };
  }

  // ===============================
  // OBTENER SUGERENCIAS DE MEJORA
  // ===============================
  getImprovementSuggestions(scriptResult) {
    const validation = this.validateScriptQuality(scriptResult);
    
    if (validation.isValid) {
      return null;
    }

    let suggestions = `üí° **Sugerencias de mejora:**\n\n`;
    
    validation.issues.forEach((issue, index) => {
      suggestions += `${index + 1}. ${issue}\n`;
    });

    suggestions += `\nüîÑ Puedes regenerar para obtener una mejor versi√≥n`;

    return suggestions;
  }

  // ===============================
  // ESTAD√çSTICAS DE APROBACI√ìN
  // ===============================
  logApprovalStats(action, sessionId, keyword) {
    const timestamp = new Date().toISOString();
    const logData = {
      timestamp,
      action,
      sessionId: sessionId.substring(0, 20) + '...', // Truncar para logs
      keyword,
      type: 'script_approval'
    };

    console.log(`üìä Aprobaci√≥n registrada:`, logData);
  }
}

module.exports = ApprovalHandler;