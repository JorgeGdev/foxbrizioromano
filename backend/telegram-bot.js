// ===============================
// TIGRIZIO - TELEGRAM BOT MODULAR FINAL
// Arquitectura escalable con validaci√≥n completa
// ===============================

const TelegramBot = require("node-telegram-bot-api");
const TwitterScraper = require("./twitter-scraper");
const SupabaseManager = require("./supabase-manager");
const TigrizioScriptGenerator = require("./script-generator");
const TigrizioVoiceGenerator = require("./voice-generator");
const TigrizioVideoGenerator = require("./video-generator");

// Importar m√≥dulos especializados
const CommandHandler = require("./bot-handlers/command-handler");
const MessageHandler = require("./bot-handlers/message-handler");
const ApprovalHandler = require("./bot-handlers/approval-handler");
const VideoPipeline = require("./bot-handlers/video-pipeline");
const SessionManager = require("./utils/session-manager");

require("dotenv").config();

class TigrizioBot {
  constructor() {
    this.bot = new TelegramBot(process.env.TELEGRAM_BOT_TOKEN, {
      polling: true,
    });
    this.chatId = process.env.TELEGRAM_CHAT_ID;

    // Inicializar m√≥dulos core
    this.scraper = new TwitterScraper();
    this.db = new SupabaseManager();
    this.scriptGen = new TigrizioScriptGenerator();
    this.voiceGen = new TigrizioVoiceGenerator();
    this.videoGen = new TigrizioVideoGenerator();

    // Estado del scraping autom√°tico
    this.autoScrapingInterval = null;
    this.isAutoScrapingActive = false;

    // Inicializar manejadores especializados
    this.sessionManager = new SessionManager();
    this.commandHandler = new CommandHandler(this);
    this.messageHandler = new MessageHandler(this);
    this.approvalHandler = new ApprovalHandler(this);
    this.videoPipeline = new VideoPipeline(this);

    this.setupBotHandlers();

    console.log("ü§ñ Tigrizio Bot modular iniciado");
  }

  // ===============================
  // CONFIGURAR MANEJADORES DEL BOT
  // ===============================
  setupBotHandlers() {
    // Configurar comandos
    this.commandHandler.setupCommands();
    
    // Configurar manejo de mensajes
    this.messageHandler.setupMessageHandler();
    
    // Configurar botones de aprobaci√≥n
    this.approvalHandler.setupApprovalHandler();


    console.log("‚úÖ Manejadores configurados");

    this.setupDebugCommands();
  }

  // ===============================
  // M√âTODOS PARA ACCESO DE M√ìDULOS
  // ===============================
  
  // Enviar mensaje con formato
  async sendMessage(chatId, text, options = {}) {
  try {
    return await this.bot.sendMessage(chatId, text, {
      parse_mode: 'Markdown',
      ...options
    });
  } catch (error) {
    // Si falla Markdown, intentar sin formato
    if (error.message.includes("can't parse entities")) {
      console.log('‚ö†Ô∏è Error de Markdown, enviando sin formato:', error.message);
      return await this.bot.sendMessage(chatId, text, {
        ...options,
        parse_mode: undefined
      });
    }
    throw error;
  }
}

  // Enviar mensaje al chat principal
  async sendToMainChat(text, options = {}) {
    return await this.sendMessage(this.chatId, text, options);
  }

  // Editar mensaje existente
  async editMessage(chatId, messageId, text, options = {}) {
    return await this.bot.editMessageText(text, {
      chat_id: chatId,
      message_id: messageId,
      parse_mode: 'Markdown',
      ...options
    });
  }

  // Responder a callback query
  async answerCallback(callbackQueryId, text, showAlert = false) {
    return await this.bot.answerCallbackQuery(callbackQueryId, {
      text: text,
      show_alert: showAlert
    });
  }

  // ===============================
  // SCRAPING AUTOM√ÅTICO (MANTENIDO)
  // ===============================
  async toggleAutoScraping(chatId, enable) {
    if (enable) {
      if (this.isAutoScrapingActive) {
        await this.sendMessage(chatId, "‚ö†Ô∏è El scraping autom√°tico ya est√° activo");
        return;
      }

      this.autoScrapingInterval = setInterval(async () => {
        await this.performAutomaticScraping();
      }, 3 * 60 * 60 * 1000);

      this.isAutoScrapingActive = true;

      await this.sendMessage(chatId, 
        "üü¢ **SCRAPING AUTOM√ÅTICO ACTIVADO**\n\n" +
        "‚è∞ Frecuencia: Cada 3 horas\n" +
        "üåç Solo en horarios activos (Europa despierta)\n" +
        "üì± Recibir√°s notificaciones autom√°ticas"
      );
    } else {
      if (!this.isAutoScrapingActive) {
        await this.sendMessage(chatId, "‚ö†Ô∏è El scraping autom√°tico ya est√° inactivo");
        return;
      }

      clearInterval(this.autoScrapingInterval);
      this.isAutoScrapingActive = false;

      await this.sendMessage(chatId, 
        "üî¥ **SCRAPING AUTOM√ÅTICO DESACTIVADO**\n\n" +
        "üì± Usa /scrape para scraping manual"
      );
    }
  }

  async performAutomaticScraping() {
    try {
      console.log("ü§ñ Ejecutando scraping autom√°tico...");

      const result = await this.scraper.performOptimizedScraping();

      if (result.success && result.tweets.length > 0) {
        let savedCount = 0;
        let vipCount = 0;

        for (const tweet of result.tweets) {
          const vipInfo = this.scraper.isVipTweet(tweet.originalText);
          const saveResult = await this.db.saveTweet(tweet, vipInfo);

          if (saveResult.success) {
            savedCount++;
            if (saveResult.isVip) vipCount++;
          }
        }

        if (savedCount > 0) {
          const message = `ü§ñ **SCRAPING AUTOM√ÅTICO**\n\n${result.summary}`;
          await this.sendToMainChat(message);
        }
      }
    } catch (error) {
      console.error("‚ùå Error en scraping autom√°tico:", error);
    }
  }

  // ===============================
  // CONTROL DEL BOT
  // ===============================
  start() {
    console.log("üöÄ Tigrizio Bot modular iniciado correctamente");
    this.sendToMainChat(
      "üêÖ **TIGRIZIO BOT MODULAR INICIADO**\n\n" +
      "üèóÔ∏è *Nueva arquitectura escalable*\n" +
      "üìã *Sistema de validaci√≥n de scripts*\n" +
      "‚ö° *Optimizaci√≥n de tokens garantizada*\n\n" +
      "üí° Usa: `tigrizio[1-9]@keyword`\n" +
      "üîÑ Nuevo: Aprobar√°s scripts antes de generar"
    );
  }

  stop() {
    if (this.autoScrapingInterval) {
      clearInterval(this.autoScrapingInterval);
    }
    this.bot.stopPolling();
    console.log("üõë Tigrizio Bot detenido");
  }

  setupDebugCommands() {
        // Comando /debug - An√°lisis completo
        this.bot.onText(/\/debug/, async (msg) => {
            try {
                await this.sendMessage(msg.chat.id, 'üî¨ DEBUG DETALLADO INICIADO...');
                
                // PASO 1: Test TwitterAPI
                await this.sendMessage(msg.chat.id, 'üì° PASO 1: Consultando TwitterAPI...');
                const tweets = await this.scraper.getRecentTweets(5);
                
                await this.sendMessage(msg.chat.id, 
                    `üìä PASO 1 RESULTADO:\n` +
                    `‚Ä¢ Tweets obtenidos: ${tweets.length}\n` +
                    `‚Ä¢ API Status: ${tweets.length > 0 ? '‚úÖ OK' : '‚ùå Sin tweets'}`
                );
                
                if (tweets.length > 0) {
                    // PASO 2: Primer tweet
                    const firstTweet = tweets[0];
                    await this.sendMessage(msg.chat.id, 
                        `üîç PASO 2 - PRIMER TWEET:\n` +
                        `‚Ä¢ ID: ${firstTweet.id}\n` +
                        `‚Ä¢ Tipo: ${typeof firstTweet.id}\n` +
                        `‚Ä¢ Fecha: ${firstTweet.createdAt}\n` +
                        `‚Ä¢ Texto: ${firstTweet.text.substring(0, 60)}...`
                    );
                    
                    // PASO 3: Verificar duplicados
                    await this.sendMessage(msg.chat.id, 'üîÑ PASO 3: Verificando duplicados...');
                    
                    let duplicateCount = 0;
                    let newCount = 0;
                    const results = [];
                    
                    for (let i = 0; i < Math.min(3, tweets.length); i++) {
                        const tweet = tweets[i];
                        const exists = await this.db.tweetExists(tweet.id);
                        
                        results.push(`${i + 1}. ${tweet.id} ‚Üí ${exists ? '‚ùå DUPLICADO' : '‚úÖ NUEVO'}`);
                        
                        if (exists) duplicateCount++;
                        else newCount++;
                    }
                    
                    await this.sendMessage(msg.chat.id, 
                        `üìä PASO 3 RESULTADO:\n` +
                        results.join('\n') + '\n\n' +
                        `üìà RESUMEN:\n` +
                        `‚Ä¢ Duplicados: ${duplicateCount}\n` +
                        `‚Ä¢ Nuevos: ${newCount}`
                    );
                }
                
                await this.sendMessage(msg.chat.id, 'üéØ DEBUG COMPLETADO');
                
            } catch (error) {
                await this.sendMessage(msg.chat.id, `üí• Error debug: ${error.message}`);
                console.error('Debug error:', error);
            }
        });

        // Comando /checkids - IDs espec√≠ficos
        this.bot.onText(/\/checkids/, async (msg) => {
            try {
                await this.sendMessage(msg.chat.id, 'üîç VERIFICANDO IDs...');
                
                const apiTweets = await this.scraper.getRecentTweets(6);
                
                if (apiTweets.length > 0) {
                    await this.sendMessage(msg.chat.id, `üì° API devolvi√≥ ${apiTweets.length} tweets`);
                    
                    for (let i = 0; i < Math.min(3, apiTweets.length); i++) {
                        const tweet = apiTweets[i];
                        const existsInDB = await this.db.tweetExists(tweet.id);
                        
                        await this.sendMessage(msg.chat.id, 
                            `üîç TWEET ${i + 1}:\n` +
                            `‚Ä¢ ID: ${tweet.id}\n` +
                            `‚Ä¢ Tipo: ${typeof tweet.id}\n` +
                            `‚Ä¢ En DB: ${existsInDB ? '‚úÖ EXISTE' : '‚ùå NUEVO'}\n` +
                            `‚Ä¢ Texto: ${tweet.text.substring(0, 50)}...\n` +
                            `‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ`
                        );
                    }
                } else {
                    await this.sendMessage(msg.chat.id, '‚ùå API no devolvi√≥ tweets');
                }
                
            } catch (error) {
                await this.sendMessage(msg.chat.id, `üí• Error IDs: ${error.message}`);
            }
        });

        // Comando /status - Estado general
        this.bot.onText(/\/status/, async (msg) => {
            try {
                const dbStats = await this.db.getStats();
                
                await this.sendMessage(msg.chat.id, 
                    `üìä ESTADO TIGRIZIO:\n\n` +
                    `üóÑÔ∏è BASE DE DATOS:\n` +
                    `‚Ä¢ Total tweets: ${dbStats.success ? dbStats.stats.total : 'Error'}\n` +
                    `‚Ä¢ VIP tweets: ${dbStats.success ? dbStats.stats.vipCount : 'Error'}\n\n` +
                    `üì° TWITTER API:\n` +
                    `‚Ä¢ Cr√©ditos: 92,185+ disponibles\n\n` +
                    `ü§ñ BOT:\n` +
                    `‚Ä¢ Estado: ‚úÖ Operativo\n` +
                    `‚Ä¢ Debug mode: ‚úÖ Activo`
                );
                
            } catch (error) {
                await this.sendMessage(msg.chat.id, `‚ùå Error status: ${error.message}`);
            }
        });

        console.log("üî¨ Comandos de debug configurados");
    }

  
}



module.exports = TigrizioBot;